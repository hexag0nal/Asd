// Project: Personal Finance Tracker (Flutter) - Prototype
// All files for a ready-to-run Flutter prototype. Use `flutter pub get` then `flutter run` (Android).

// ---------- FILE: pubspec.yaml ----------
name: personal_finance_prototype
description: A minimal Android-first personal finance tracker prototype (local-only).
publish_to: 'none'
version: 0.1.0+1
environment:
  sdk: '>=2.18.0 <3.0.0'

dependencies:
  flutter:
    sdk: flutter
  provider: ^6.0.5
  sqflite: ^2.2.8+4
  path_provider: ^2.0.15
  path: ^1.8.3
  fl_chart: ^0.60.0
  intl: ^0.18.1
  excel: ^2.0.1

dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:
  uses-material-design: true

// ---------- FILE: lib/main.dart ----------
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:personal_finance_prototype/services/local_db.dart';
import 'package:personal_finance_prototype/providers/finance_provider.dart';
import 'package:personal_finance_prototype/screens/dashboard.dart';
import 'package:personal_finance_prototype/screens/transactions.dart';
import 'package:personal_finance_prototype/screens/investments.dart';
import 'package:personal_finance_prototype/screens/settings.dart';
import 'package:personal_finance_prototype/services/locale_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await LocalDb.instance.init(); // initialize local sqlite DB
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => FinanceProvider()),
        ChangeNotifierProvider(create: (_) => LocaleService()),
      ],
      child: Consumer<LocaleService>(
        builder: (context, localeService, _) {
          return MaterialApp(
            debugShowCheckedModeBanner: false,
            title: 'PocketTrack',
            theme: ThemeData.dark().copyWith(
              scaffoldBackgroundColor: const Color(0xFF0B0D10),
              primaryColor: const Color(0xFF1F8A70),
              colorScheme: ColorScheme.dark(
                primary: const Color(0xFF1F8A70),
                secondary: const Color(0xFF2D2F33),
              ),
              appBarTheme: const AppBarTheme(
                backgroundColor: Color(0xFF0F1113),
                elevation: 0,
              ),
            ),
            locale: localeService.locale,
            home: const MainShell(),
          );
        },
      ),
    );
  }
}

class MainShell extends StatefulWidget {
  const MainShell({Key? key}) : super(key: key);

  @override
  State<MainShell> createState() => _MainShellState();
}

class _MainShellState extends State<MainShell> {
  int _index = 0;
  final _pages = const [
    DashboardScreen(),
    TransactionsScreen(),
    InvestmentScreen(),
    SettingsScreen(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(child: _pages[_index]),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _index,
        backgroundColor: const Color(0xFF0F1113),
        selectedItemColor: const Color(0xFF1F8A70),
        unselectedItemColor: Colors.white70,
        onTap: (i) => setState(() => _index = i),
        items: [
          BottomNavigationBarItem(icon: const Icon(Icons.dashboard), label: LocaleService.t('overview')),
          BottomNavigationBarItem(icon: const Icon(Icons.list_alt), label: LocaleService.t('transactions')),
          BottomNavigationBarItem(icon: const Icon(Icons.show_chart), label: LocaleService.t('investments')),
          BottomNavigationBarItem(icon: const Icon(Icons.settings), label: LocaleService.t('settings')),
        ],
      ),
    );
  }
}

// ---------- FILE: lib/services/locale_service.dart ----------
import 'package:flutter/widgets.dart';

class LocaleService with ChangeNotifier {
  Locale _locale = const Locale('en');

  Locale get locale => _locale;

  void setLocale(Locale l) {
    _locale = l;
    notifyListeners();
  }

  static String t(String key) {
    // Simple in-file localization map for EN / TR. Expandable.
    const en = {
      'overview': 'Overview',
      'transactions': 'Transactions',
      'investments': 'Investments',
      'settings': 'Settings',
      'income': 'Income',
      'expense': 'Expense',
      'add': 'Add',
      'export': 'Export to Excel',
      'language': 'Language',
      'notifications': 'Notifications',
      'akbank_import': 'Import from Akbank',
      'quick_add': 'Quick Add',
      'category': 'Category',
      'amount': 'Amount',
      'note': 'Note',
      'date': 'Date',
    };
    const tr = {
      'overview': 'Genel Bakış',
      'transactions': 'İşlemler',
      'investments': 'Yatırımlar',
      'settings': 'Ayarlar',
      'income': 'Gelir',
      'expense': 'Gider',
      'add': 'Ekle',
      'export': 'Excel'e Aktar',
      'language': 'Dil',
      'notifications': 'Bildirimler',
      'akbank_import': 'Akbank'tan İçe Aktar',
      'quick_add': 'Hızlı Ekle',
      'category': 'Kategori',
      'amount': 'Tutar',
      'note': 'Not',
      'date': 'Tarih',
    };

    final locale = WidgetsBinding.instance.window.locale.languageCode;
    if (locale == 'tr') return tr[key] ?? key;
    return en[key] ?? key;
  }
}

// ---------- FILE: lib/models/transaction_model.dart ----------
class TransactionModel {
  int? id;
  String type; // 'income' or 'expense'
  String category;
  double amount;
  String currency; // e.g. 'TRY', 'USD', 'BTC'
  String note;
  int timestamp; // epoch millis

  TransactionModel({this.id, required this.type, required this.category, required this.amount, this.currency = 'TRY', this.note = '', required this.timestamp});

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'type': type,
      'category': category,
      'amount': amount,
      'currency': currency,
      'note': note,
      'timestamp': timestamp,
    };
  }

  factory TransactionModel.fromMap(Map<String, dynamic> m) {
    return TransactionModel(
      id: m['id'] as int?,
      type: m['type'],
      category: m['category'],
      amount: (m['amount'] as num).toDouble(),
      currency: m['currency'],
      note: m['note'] ?? '',
      timestamp: m['timestamp'],
    );
  }
}

// ---------- FILE: lib/models/investment_model.dart ----------
class InvestmentModel {
  int? id;
  String asset; // e.g., 'BTC', 'ETH', 'Savings'
  double amount; // units (e.g., 0.01 BTC) or currency amount depending
  String currency; // denominating currency
  int timestamp;

  InvestmentModel({this.id, required this.asset, required this.amount, this.currency = 'USD', required this.timestamp});

  Map<String, dynamic> toMap() => {
        'id': id,
        'asset': asset,
        'amount': amount,
        'currency': currency,
        'timestamp': timestamp,
      };

  factory InvestmentModel.fromMap(Map<String, dynamic> m) => InvestmentModel(
        id: m['id'] as int?,
        asset: m['asset'],
        amount: (m['amount'] as num).toDouble(),
        currency: m['currency'],
        timestamp: m['timestamp'],
      );
}

// ---------- FILE: lib/services/local_db.dart ----------
import 'dart:async';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';
import 'package:personal_finance_prototype/models/transaction_model.dart';
import 'package:personal_finance_prototype/models/investment_model.dart';

class LocalDb {
  LocalDb._privateConstructor();
  static final LocalDb instance = LocalDb._privateConstructor();
  Database? _db;

  Future<void> init() async {
    final docs = await getApplicationDocumentsDirectory();
    final path = join(docs.path, 'pockettrack.db');
    _db = await openDatabase(path, version: 1, onCreate: _onCreate);
    // Insert sample data if empty
    final count = Sqflite.firstIntValue(await _db!.rawQuery('SELECT COUNT(*) FROM transactions')) ?? 0;
    if (count == 0) {
      await insertTransaction(TransactionModel(type: 'income', category: 'Part-time', amount: 500.0, currency: 'TRY', note: 'Grant', timestamp: DateTime.now().millisecondsSinceEpoch - 86400000));
      await insertTransaction(TransactionModel(type: 'expense', category: 'Food', amount: 30.0, currency: 'TRY', note: 'Lunch', timestamp: DateTime.now().millisecondsSinceEpoch));
      await insertInvestment(InvestmentModel(asset: 'BTC', amount: 0.001, currency: 'BTC', timestamp: DateTime.now().millisecondsSinceEpoch));
    }
  }

  Future _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE transactions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT,
        category TEXT,
        amount REAL,
        currency TEXT,
        note TEXT,
        timestamp INTEGER
      )
    ''');

    await db.execute('''
      CREATE TABLE investments(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        asset TEXT,
        amount REAL,
        currency TEXT,
        timestamp INTEGER
      )
    ''');
  }

  // Transaction CRUD
  Future<int> insertTransaction(TransactionModel t) async {
    return await _db!.insert('transactions', t.toMap());
  }

  Future<List<TransactionModel>> getAllTransactions() async {
    final rows = await _db!.query('transactions', orderBy: 'timestamp DESC');
    return rows.map((r) => TransactionModel.fromMap(r)).toList();
  }

  Future<int> deleteTransaction(int id) async {
    return await _db!.delete('transactions', where: 'id = ?', whereArgs: [id]);
  }

  // Investment CRUD
  Future<int> insertInvestment(InvestmentModel inv) async {
    return await _db!.insert('investments', inv.toMap());
  }

  Future<List<InvestmentModel>> getAllInvestments() async {
    final rows = await _db!.query('investments', orderBy: 'timestamp DESC');
    return rows.map((r) => InvestmentModel.fromMap(r)).toList();
  }
}

// ---------- FILE: lib/providers/finance_provider.dart ----------
import 'package:flutter/foundation.dart';
import 'package:personal_finance_prototype/models/transaction_model.dart';
import 'package:personal_finance_prototype/models/investment_model.dart';
import 'package:personal_finance_prototype/services/local_db.dart';

class FinanceProvider with ChangeNotifier {
  List<TransactionModel> transactions = [];
  List<InvestmentModel> investments = [];
  bool loading = false;

  FinanceProvider() {
    loadAll();
  }

  Future<void> loadAll() async {
    loading = true;
    notifyListeners();
    transactions = await LocalDb.instance.getAllTransactions();
    investments = await LocalDb.instance.getAllInvestments();
    loading = false;
    notifyListeners();
  }

  Future<void> addTransaction(TransactionModel t) async {
    await LocalDb.instance.insertTransaction(t);
    await loadAll();
  }

  Future<void> addInvestment(InvestmentModel i) async {
    await LocalDb.instance.insertInvestment(i);
    await loadAll();
  }

  double get totalIncome => transactions.where((t) => t.type == 'income').fold(0.0, (p, e) => p + e.amount);
  double get totalExpense => transactions.where((t) => t.type == 'expense').fold(0.0, (p, e) => p + e.amount);
  double get balance => totalIncome - totalExpense;
}

// ---------- FILE: lib/screens/dashboard.dart ----------
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:personal_finance_prototype/providers/finance_provider.dart';
import 'package:personal_finance_prototype/services/locale_service.dart';
import 'package:fl_chart/fl_chart.dart';

class DashboardScreen extends StatelessWidget {
  const DashboardScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final fp = Provider.of<FinanceProvider>(context);

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(LocaleService.t('overview'), style: const TextStyle(fontSize: 28, fontWeight: FontWeight.bold)),
          const SizedBox(height: 12),
          // Summary cards
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _SummaryCard(title: LocaleService.t('income'), amount: fp.totalIncome),
              _SummaryCard(title: LocaleService.t('expense'), amount: fp.totalExpense),
              _SummaryCard(title: 'Balance', amount: fp.balance),
            ],
          ),
          const SizedBox(height: 16),
          // Quick chart placeholder
          const Text('Analytics', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
          const SizedBox(height: 8),
          SizedBox(
            height: 180,
            child: Card(
              color: const Color(0xFF121316),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: LineChart(
                  LineChartData(
                    gridData: FlGridData(show: false),
                    titlesData: FlTitlesData(show: false),
                    borderData: FlBorderData(show: false),
                    lineBarsData: [
                      LineChartBarData(spots: [
                        FlSpot(0, fp.totalExpense / (fp.totalIncome + 1)),
                        FlSpot(1, fp.totalExpense / (fp.totalIncome + 1) + 0.1),
                        FlSpot(2, fp.totalExpense / (fp.totalIncome + 1) - 0.05),
                        FlSpot(3, fp.totalExpense / (fp.totalIncome + 1) + 0.2),
                      ], isCurved: true, dotData: FlDotData(show: false)),
                    ],
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(height: 16),
          const Text('Recent', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
          const SizedBox(height: 8),
          Expanded(
            child: fp.loading
                ? const Center(child: CircularProgressIndicator())
                : ListView.builder(
                    itemCount: fp.transactions.length,
                    itemBuilder: (context, i) {
                      final t = fp.transactions[i];
                      return Card(
                        color: const Color(0xFF0E0F11),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                        child: ListTile(
                          leading: CircleAvatar(child: Text(t.currency)),
                          title: Text('${t.category} • ${t.type}'),
                          subtitle: Text(t.note),
                          trailing: Text('${t.amount.toStringAsFixed(2)} ${t.currency}'),
                        ),
                      );
                    },
                  ),
          )
        ],
      ),
    );
  }
}

class _SummaryCard extends StatelessWidget {
  final String title;
  final double amount;
  const _SummaryCard({required this.title, required this.amount, Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: Card(
        color: const Color(0xFF111214),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(title, style: const TextStyle(fontSize: 12)),
              const SizedBox(height: 8),
              Text(amount.toStringAsFixed(2), style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
            ],
          ),
        ),
      ),
    );
  }
}

// ---------- FILE: lib/screens/transactions.dart ----------
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:personal_finance_prototype/providers/finance_provider.dart';
import 'package:personal_finance_prototype/models/transaction_model.dart';
import 'package:personal_finance_prototype/services/locale_service.dart';

class TransactionsScreen extends StatefulWidget {
  const TransactionsScreen({Key? key}) : super(key: key);

  @override
  State<TransactionsScreen> createState() => _TransactionsScreenState();
}

class _TransactionsScreenState extends State<TransactionsScreen> {
  final _formKey = GlobalKey<FormState>();
  String _type = 'expense';
  String _category = 'Food';
  double _amount = 0.0;
  String _currency = 'TRY';
  String _note = '';

  final _categories = [
    'Food',
    'Transport',
    'Education',
    'Entertainment',
    'Part-time',
    'Groceries',
    'Other',
  ];

  @override
  Widget build(BuildContext context) {
    final fp = Provider.of<FinanceProvider>(context);
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        Text(LocaleService.t('transactions'), style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
        const SizedBox(height: 12),
        // Quick add form
        Card(
          color: const Color(0xFF0F1113),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Form(
              key: _formKey,
              child: Column(children: [
                Row(children: [
                  Expanded(
                    child: DropdownButtonFormField<String>(
                      value: _type,
                      items: const [
                        DropdownMenuItem(value: 'expense', child: Text('Expense')),
                        DropdownMenuItem(value: 'income', child: Text('Income')),
                      ],
                      onChanged: (v) => setState(() => _type = v ?? 'expense'),
                      decoration: InputDecoration(labelText: LocaleService.t('quick_add')),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: DropdownButtonFormField<String>(
                      value: _category,
                      items: _categories.map((c) => DropdownMenuItem(value: c, child: Text(c))).toList(),
                      onChanged: (v) => setState(() => _category = v ?? _categories.first),
                      decoration: InputDecoration(labelText: LocaleService.t('category')),
                    ),
                  ),
                ]),
                const SizedBox(height: 8),
                Row(children: [
                  Expanded(
                    child: TextFormField(
                      decoration: InputDecoration(labelText: LocaleService.t('amount')),
                      keyboardType: TextInputType.numberWithOptions(decimal: true),
                      onSaved: (v) => _amount = double.tryParse(v ?? '0') ?? 0.0,
                      validator: (v) => (v == null || v.isEmpty) ? 'Enter amount' : null,
                    ),
                  ),
                  const SizedBox(width: 8),
                  SizedBox(
                    width: 100,
                    child: TextFormField(
                      decoration: InputDecoration(labelText: 'CUR'),
                      initialValue: _currency,
                      onSaved: (v) => _currency = v ?? 'TRY',
                    ),
                  ),
                ]),
                const SizedBox(height: 8),
                TextFormField(
                  decoration: InputDecoration(labelText: LocaleService.t('note')),
                  onSaved: (v) => _note = v ?? '',
                ),
                const SizedBox(height: 8),
                Row(mainAxisAlignment: MainAxisAlignment.end, children: [
                  ElevatedButton(
                    onPressed: () async {
                      if (_formKey.currentState!.validate()) {
                        _formKey.currentState!.save();
                        final t = TransactionModel(type: _type, category: _category, amount: _amount, currency: _currency, note: _note, timestamp: DateTime.now().millisecondsSinceEpoch);
                        await fp.addTransaction(t);
                        _formKey.currentState!.reset();
                      }
                    },
                    child: Text(LocaleService.t('add')),
                  )
                ])
              ]),
            ),
          ),
        ),
        const SizedBox(height: 12),
        const Text('All Transactions', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
        const SizedBox(height: 8),
        Expanded(
          child: fp.loading
              ? const Center(child: CircularProgressIndicator())
              : ListView.builder(
                  itemCount: fp.transactions.length,
                  itemBuilder: (context, i) {
                    final t = fp.transactions[i];
                    return Card(
                      color: const Color(0xFF0E0F11),
                      child: ListTile(
                        leading: Icon(t.type == 'income' ? Icons.arrow_downward : Icons.arrow_upward, color: t.type == 'income' ? Colors.green : Colors.red),
                        title: Text('${t.category} • ${t.type}'),
                        subtitle: Text('${DateTime.fromMillisecondsSinceEpoch(t.timestamp)} • ${t.note}'),
                        trailing: Text('${t.amount.toStringAsFixed(2)} ${t.currency}'),
                      ),
                    );
                  },
                ),
        )
      ]),
    );
  }
}

// ---------- FILE: lib/screens/investments.dart ----------
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:personal_finance_prototype/providers/finance_provider.dart';
import 'package:personal_finance_prototype/models/investment_model.dart';
import 'package:personal_finance_prototype/services/locale_service.dart';

class InvestmentScreen extends StatefulWidget {
  const InvestmentScreen({Key? key}) : super(key: key);

  @override
  State<InvestmentScreen> createState() => _InvestmentScreenState();
}

class _InvestmentScreenState extends State<InvestmentScreen> {
  final _assetCtrl = TextEditingController();
  final _amountCtrl = TextEditingController();

  @override
  void dispose() {
    _assetCtrl.dispose();
    _amountCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final fp = Provider.of<FinanceProvider>(context);
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(children: [
        Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [
          Text(LocaleService.t('investments'), style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
          ElevatedButton(onPressed: () => _showAddDialog(context, fp), child: const Text('Add'))
        ]),
        const SizedBox(height: 12),
        Expanded(
          child: fp.loading
              ? const Center(child: CircularProgressIndicator())
              : ListView.builder(
                  itemCount: fp.investments.length,
                  itemBuilder: (context, i) {
                    final inv = fp.investments[i];
                    return Card(
                      color: const Color(0xFF0E0F11),
                      child: ListTile(
                        leading: CircleAvatar(child: Text(inv.asset)),
                        title: Text(inv.asset),
                        subtitle: Text('Amount: ${inv.amount} • ${inv.currency}'),
                        trailing: Text(DateTime.fromMillisecondsSinceEpoch(inv.timestamp).toLocal().toString().split(' ').first),
                      ),
                    );
                  },
                ),
        )
      ]),
    );
  }

  void _showAddDialog(BuildContext context, FinanceProvider fp) {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Add Investment'),
        content: Column(mainAxisSize: MainAxisSize.min, children: [
          TextField(controller: _assetCtrl, decoration: const InputDecoration(labelText: 'Asset (e.g., BTC)')),
          TextField(controller: _amountCtrl, decoration: const InputDecoration(labelText: 'Amount'), keyboardType: TextInputType.numberWithOptions(decimal: true)),
        ]),
        actions: [
          TextButton(onPressed: () => Navigator.pop(ctx), child: const Text('Cancel')),
          ElevatedButton(
            onPressed: () async {
              final asset = _assetCtrl.text.trim();
              final amount = double.tryParse(_amountCtrl.text.trim()) ?? 0.0;
              if (asset.isEmpty || amount <= 0) return;
              final inv = InvestmentModel(asset: asset, amount: amount, currency: asset, timestamp: DateTime.now().millisecondsSinceEpoch);
              await fp.addInvestment(inv);
              _assetCtrl.clear();
              _amountCtrl.clear();
              Navigator.pop(ctx);
            },
            child: const Text('Add'),
          )
        ],
      ),
    );
  }
}

// ---------- FILE: lib/screens/settings.dart ----------
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:personal_finance_prototype/services/locale_service.dart';
import 'package:personal_finance_prototype/providers/finance_provider.dart';
import 'package:personal_finance_prototype/services/akbank_service.dart';
import 'package:personal_finance_prototype/services/export_service.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final localeSvc = Provider.of<LocaleService>(context);
    final fp = Provider.of<FinanceProvider>(context, listen: false);
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        Text(LocaleService.t('settings'), style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
        const SizedBox(height: 12),
        Card(
          color: const Color(0xFF0F1113),
          child: ListTile(
            title: Text(LocaleService.t('language')),
            subtitle: const Text('English / Türkçe'),
            trailing: DropdownButton<Locale>(
              value: localeSvc.locale,
              items: const [
                DropdownMenuItem(value: Locale('en'), child: Text('English')),
                DropdownMenuItem(value: Locale('tr'), child: Text('Türkçe')),
              ],
              onChanged: (l) { if (l != null) localeSvc.setLocale(l); },
            ),
          ),
        ),
        const SizedBox(height: 8),
        Card(
          color: const Color(0xFF0F1113),
          child: ListTile(
            title: Text(LocaleService.t('notifications')),
            subtitle: const Text('Select notification types'),
            trailing: Switch(value: true, onChanged: (v) {/* placeholder */}),
          ),
        ),
        const SizedBox(height: 8),
        Card(
          color: const Color(0xFF0F1113),
          child: ListTile(
            title: Text(LocaleService.t('akbank_import')),
            subtitle: const Text('Attempt automatic import (placeholder)'),
            trailing: ElevatedButton(onPressed: () async {
              // Attempt Akbank import; this is a mock placeholder
              final result = await AkbankService.importFromAkbank();
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
            }, child: const Text('Import')),
          ),
        ),
        const SizedBox(height: 8),
        Card(
          color: const Color(0xFF0F1113),
          child: ListTile(
            title: Text(LocaleService.t('export')),
            subtitle: const Text('Save local Excel file'),
            trailing: ElevatedButton(onPressed: () async {
              final path = await ExportService.exportAllToExcel();
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Exported: \$path')));
            }, child: Text(LocaleService.t('export'))),
          ),
        ),
      ]),
    );
  }
}

// ---------- FILE: lib/services/akbank_service.dart ----------
// Placeholder/mock for Akbank automatic import. Real integration requires Akbank APIs and user consent.
class AkbankService {
  static Future<String> importFromAkbank() async {
    // In a real app you'd implement OAuth, scraping is not allowed.
    // Here we return a placeholder string indicating the action.
    await Future.delayed(const Duration(seconds: 1));
    return 'Akbank import is a placeholder in this prototype.';
  }
}

// ---------- FILE: lib/services/export_service.dart ----------
import 'dart:io';
import 'package:excel/excel.dart';
import 'package:path_provider/path_provider.dart';
import 'package:personal_finance_prototype/services/local_db.dart';

class ExportService {
  static Future<String> exportAllToExcel() async {
    final excel = Excel.createExcel();
    final sheet = excel['Transactions'];
    sheet.appendRow(['id', 'type', 'category', 'amount', 'currency', 'note', 'timestamp']);
    final transactions = await LocalDb.instance.getAllTransactions();
    for (var t in transactions) {
      sheet.appendRow([t.id, t.type, t.category, t.amount, t.currency, t.note, DateTime.fromMillisecondsSinceEpoch(t.timestamp).toIso8601String()]);
    }

    final invSheet = excel['Investments'];
    invSheet.appendRow(['id', 'asset', 'amount', 'currency', 'timestamp']);
    final investments = await LocalDb.instance.getAllInvestments();
    for (var i in investments) {
      invSheet.appendRow([i.id, i.asset, i.amount, i.currency, DateTime.fromMillisecondsSinceEpoch(i.timestamp).toIso8601String()]);
    }

    final bytes = excel.encode();
    final docs = await getApplicationDocumentsDirectory();
    final file = File('${docs.path}/pockettrack_export_\${DateTime.now().millisecondsSinceEpoch}.xlsx');
    await file.writeAsBytes(bytes!);
    return file.path;
  }
}

// ---------- FILE: lib/generated/sample_data.dart ----------
// Optional: contains sample data building functions (not strictly necessary because DB seeds on init)

// End of project files
